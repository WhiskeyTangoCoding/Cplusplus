// // Licensed under the MIT license. See LICENSE file in the project root for full license information.

*/ Developer: WhiskeyTango Coding

/*=================================================    | PROJECT INTELLIGENCE |    ==================================================*/

//--- LIVE tutorial: ASSIGNMENT OPERATORS in C++ - Part 27

/**/
/* ASSIGNMENT OPERATORS:

		Arithmetic or Binary Operators: =  +  -  *  /  %				Compiler: * MULTIPLY   DIVISION /

		Assignment Operators : assign a 'value' to a 'variable'.		For eg. int x = 45;
		Operators: are symbols that instruct the computer to perform a single, simple task, and most consist of just one or two characters.

		MODULO  %  (percentage symbol)	THINK?  'Remainders'

		190 % 8				8 x 2 = 16; 8 x 3 = 24; 8 x 4 = 32;   32 > 30		(Long Division)
			  23
			----
		  8| 190
		   - 16
			----
			  30    = Remainder			( 23 R 6 )				2 10
			- 24											  - 2  4
			----											   -----
			   6										Modulo:    6
*/

/**/
/*	How fmod(); works in C++ ?

		 Definition of fmod(); in C++	(Modulo for float Data types)

		 The fmod() function returns the 'floating-point' remainder of the division of two values (rounded towards zero).
		 It is the extension of the modulo operation to floating-point numbers.

					 0					 3
					--- = 0    but...   ---   = 'UNDEFINED'   Hence, why we are getting '-nan' as a return in CONSOLE.
					 5					 0
*/

/**/
/*	Six (6) Types of Comparison Operators		(For within our For Loops and Do While Loops)    (For testing)
			Equal to-Equal to				==
			NOT Equal to					!=              (Exclamation point)
			Less than						<
			Greater than					>
			Less than or Equal to			<=
			Greater than or Equal to	    >=

		Note that  =   is reserved for setting a value equal to a 'Variable', For eg. int x = 8;
		Note that  ==  is reserved for comparing a 'Variable' and a value  For eg. (x == 8) {

			** Relational Operators   >   <     Greater than and Less than
			Equality Operators    ==   !=    Equal to-Equal to , and ! means NOT Equal to

				!false -> true
				!true -> false
*/

/**/
/*	LOgical Operators  (Is used within our parenthesis) for (test condition) {}

			&&  Logical AND. True only if both or all the operands are true.
			||  Logical OR. True if at least one of the operands is true.

	(test condition) - "To be able to conditionally run code."
		-Note that: an internal function(x, 2); - takes 'Parameters'   and   for(x == 8 && y == 8) {} loops - take 'Arguments' and/or Conditions...
*/

---

/*=====================================================    | END OF NOTES |    ======================================================*/

//
