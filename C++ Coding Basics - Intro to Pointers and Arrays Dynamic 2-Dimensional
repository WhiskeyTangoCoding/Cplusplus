

  // Intro to Pointers and Arrays Dynamic 2-Dimensional
	// What is a Multi-Dimensional 'Dynamic Array'?

	int rows = 3;
	int cols = 3;

	//std::cout << "USer enter # of rows: ";
	//std::cin >> rows;

	//std::cout << "USer enter # of columns: ";
	//std::cin >> cols;

	int** data = new int* [rows * cols] {};

	for (int i = 0; i < rows; ++i)
	{
		for (int j = 0; j < cols; ++j)
		{
			data[j * cols + i];
		}
	}

	//data[rows][cols] = { {24, 15, 34}, {26, 134, 194}, {67, 23, 345} };

	data[0][0] = 24;
	data[0][1] = 15;
	data[0][2] = 34;

	data[1][0] = 26;
	data[1][1] = 134;
	data[1][2] = 194;

	data[2][0] = 67;
	data[2][1] = 23;
	data[2][2] = 345;

	for (int i = 0; i < rows; ++i)
	{
		for (int j = 0; j < cols; ++j)
		{
			std::cout << data[i][j] << " ";

		}
	}

	for (int i = 0; i < rows; ++i)
	{
		delete[] data[i];
	}

	delete[] data;
	data = NULL;

/**/
// Return 2D Array from Function in C++ Using Static Keyword

const int N = 3;

void printArr(int arr[][N])
{
	for (int i = 0; i < N; ++i)
	{
		for (int j = 0; j < N; ++j)
		{
			std::cout << arr[i][j] << " ";
		}
		std::cout << '\n';
	}
}

int(*(getArr)()) [N]
{
		static int arr[N][N] = { {24, 15, 34}, {26, 134, 194}, {67, 23, 345} };
		return arr;
}

int main () 
{
	int(*arr)[N];
	arr = getArr();
	printArr(arr);

}
